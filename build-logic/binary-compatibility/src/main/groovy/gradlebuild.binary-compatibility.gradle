/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import gradlebuild.basics.PublicApi
import gradlebuild.basics.PublicKotlinDslApi
import gradlebuild.basics.GradleModuleApiAttribute
import me.champeau.gradle.japicmp.JapicmpTask
import gradlebuild.binarycompatibility.AcceptedApiChanges
import gradlebuild.binarycompatibility.BinaryCompatibilityHelper
import gradlebuild.binarycompatibility.CleanAcceptedApiChanges
import gradlebuild.binarycompatibility.transforms.ExplodeZipAndFindJars
import gradlebuild.binarycompatibility.transforms.FindGradleClasspath
import gradlebuild.binarycompatibility.transforms.FindGradleJars

plugins {
    id("gradlebuild.module-identity")
}

repositories {
    ['distributions', 'distributions-snapshots'].each { distUrl ->
        ivy {
            name 'Gradle distributions'
            url 'https://services.gradle.org'
            patternLayout {
                artifact "/${distUrl}/[module]-[revision]-bin(.[ext])"
            }
            metadataSources {
                artifact()
            }
            content {
                includeModule('gradle', 'gradle')
            }
        }
    }
}

def apiChangesJsonFile = layout.projectDirectory.file("src/changes/accepted-public-api-changes.json")
def acceptedViolations = AcceptedApiChanges.parse(providers.fileContents(apiChangesJsonFile).asText.get())
def compatibilityBaselineVersion = moduleIdentity.releasedVersions.get().mostRecentRelease.version

def ARTIFACT_TYPE = Attribute.of('artifactType', String)
def RUNTIME_ATTRIBUTE = objects.named(Usage, Usage.JAVA_RUNTIME)
def DOCUMENTATION_ATTRIBUTE = objects.named(Category, Category.DOCUMENTATION)
def SOURCES_ATTRIBUTE = objects.named(DocsType, "gradle-source-folders")

configurations {
    baseline
    baselineClasspath {
        extendsFrom baseline
        attributes.attribute(ARTIFACT_TYPE, 'gradle-classpath')
    }
    baselineJars {
        extendsFrom baseline
        attributes.attribute(ARTIFACT_TYPE, 'gradle-baseline-jars')
    }
    currentClasspath {
        canBeConsumed = false
        canBeResolved = false
        visible = false
    }
    currentApiClasspath {
        canBeConsumed = false
        canBeResolved = true
        description = "Classpath to check binary compatibility against"
        attributes.attribute(GradleModuleApiAttribute.attribute as Attribute<GradleModuleApiAttribute>, GradleModuleApiAttribute.API)
        extendsFrom(currentClasspath)
    }
    currentSources {
        canBeConsumed = false
        canBeResolved = true
        description = "Sources to check binary compatibility against"
        attributes.attribute(GradleModuleApiAttribute.attribute as Attribute<GradleModuleApiAttribute>, GradleModuleApiAttribute.API)
        attributes.attribute(Usage.USAGE_ATTRIBUTE as Attribute<Usage>, RUNTIME_ATTRIBUTE)
        attributes.attribute(Category.CATEGORY_ATTRIBUTE as Attribute<Category>, DOCUMENTATION_ATTRIBUTE)
        attributes.attribute(DocsType.DOCS_TYPE_ATTRIBUTE as Attribute<DocsType>, SOURCES_ATTRIBUTE)
        extendsFrom(currentClasspath)
    }
}

dependencies {
    baseline("gradle:gradle:${compatibilityBaselineVersion}@zip")

    // This transform takes the Gradle zip distribution,
    // and unzips the Gradle jar files that it contains in a directory
    registerTransform(ExplodeZipAndFindJars) {
        from.attribute(ARTIFACT_TYPE, 'zip')
        to.attribute(ARTIFACT_TYPE, 'gradle-libs-dir')
    }
    registerTransform(FindGradleClasspath) {
        from.attribute(ARTIFACT_TYPE, 'gradle-libs-dir')
        to.attribute(ARTIFACT_TYPE, 'gradle-classpath')
    }
}

def checkBinaryCompatibility = tasks.register("checkBinaryCompatibility", JapicmpTask) {
    def baseVersion = moduleIdentity.version.map { it.baseVersion.version }
    def isSnapshot = moduleIdentity.snapshot
    inputs.property('acceptedViolations', acceptedViolations.toAcceptedChangesMap())
    inputs.property("baseline.version", compatibilityBaselineVersion)
    inputs.property("currentVersion", baseVersion)
    def apiSourceFolders = configurations.currentSources.incoming.artifactView { lenient(true) }.files
    inputs.files("apiSourceFolders", apiSourceFolders)
    def currentClasspath = configurations.currentApiClasspath.incoming.artifactView { lenient(true) }.files
    inputs.files(currentClasspath)

    newClasspath = currentClasspath
    oldClasspath = configurations.baselineClasspath

    def currentDistributionJars = currentClasspath.filter { it.name.startsWith('gradle-') && it.name.endsWith('.jar') }
    newArchives = currentDistributionJars
    oldArchives = configurations.baselineJars

    dependencies.registerTransform(FindGradleJars) {
        from.attribute(ARTIFACT_TYPE, 'gradle-libs-dir')
        to.attribute(ARTIFACT_TYPE, 'gradle-baseline-jars')
        parameters {
            currentJars.from(currentDistributionJars)
            currentVersion.set(baseVersion)
        }
    }

    // binary breaking change checking setup
    onlyModified = false
    failOnModification = false // we rely on the custom report to fail or not
    ignoreMissingClasses = true // because of a missing scala.runtime.AbstractFunction0 class
    richReport {
        includedClasses = toPatterns(PublicApi.includes + PublicKotlinDslApi.includes)
        excludedClasses = toPatterns(PublicApi.excludes + PublicKotlinDslApi.excludes)

        title = "Binary compatibility report for Gradle ${isSnapshot.get() ? "${baseVersion.get()}-SNAPSHOT" : version} since ${compatibilityBaselineVersion}"
        destinationDir = file("$buildDir/reports/binary-compatibility")
        reportName = "report.html"
        description = """
            <p>See the <a href="https://docs.google.com/document/d/1KA5yI4HL18qOeXjXLTMMD_upkDbNUzTDGNfBGYdQlYw/edit#heading=h.9yqcmqviz47z">documentation</a> for more details.</p>
            <p>
            We check the binary compatibility by comparing the current codeâ€™s binary interfaces
            against THE LATEST VERSION WHICH IS RELEASED FROM RELEASE BRANCH (from `released-version.json` on this branch)
            AND LOWER THAN CURRENT BASE VERSION (from `version.txt` on this branch).
            The difference must identically match `accepted-public-api-changes.json`, no more, no less - otherwise the task will fail.
            </p>
""".stripIndent()
    }

    BinaryCompatibilityHelper.setupJApiCmpRichReportRules(delegate, acceptedViolations, apiSourceFolders, baseVersion.get())
}
tasks.named("check").configure { dependsOn(checkBinaryCompatibility) }

tasks.register("cleanAcceptedApiChanges", CleanAcceptedApiChanges) {
    description = 'Cleans up all existing accepted API changes.'
    jsonFile = apiChangesJsonFile.asFile
}

static List<String> toPatterns(List<String> packages) {
    packages.collect {
        it.replaceAll('\\*\\*', '###')
            .replaceAll('/\\*', '/[A-Z][a-z_A-Z0-9]+')
            .replaceAll('$', '\\$')
            .replaceAll('/', '[.]')
            .replaceAll('###', '.*?')
    }
}
