import gradlebuild.integrationtests.model.GradleDistribution
import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.gradle.docs.internal.tasks.CheckLinks
import org.gradle.docs.samples.internal.tasks.InstallSample

import static gradlebuild.basics.BuildEnvironmentKt.repoRoot
import static gradlebuild.basics.Repositories_extensionsKt.googleApisJs
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'gradlebuild.internal.java'
    // TODO: Apply asciidoctor in documentation plugin instead.
    id 'org.asciidoctor.jvm.convert'
    id 'gradlebuild.documentation'
    id 'gradlebuild.generate-samples'
    id 'gradlebuild.split-docs'
}

repositories { handler ->
    googleApisJs(handler)
}

configurations {
    gradleFullDocsElements {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "gradle-documentation"))
        }
        visible = false
        canBeResolved = false
        canBeConsumed = true
    }
    docsTestRuntimeClasspath.extendsFrom(integTestDistributionRuntimeOnly)
}

dependencies {
    // generate Javadoc for the full Gradle distribution
    runtimeOnly project(":distributions-full")

    userGuideTask 'xalan:xalan:2.7.1'
    userGuideTask 'xerces:xercesImpl:2.11.0'
    userGuideTask 'net.sf.xslthl:xslthl:2.0.1'

    userGuideStyleSheets 'net.sf.docbook:docbook-xsl:1.75.2:resources@zip'

    jquery "jquery:jquery.min:3.5.1@js"

    testImplementation project(":base-services")
    testImplementation project(":core")
    testImplementation libs.jsoup
    testImplementation "org.gebish:geb-spock:2.2"
    testImplementation 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.42.2'
    testImplementation libs.commonsHttpclient
    testImplementation libs.httpmime

    docsTestImplementation platform(project(":distributions-dependencies"))
    docsTestImplementation project(":internal-integ-testing")
    docsTestImplementation project(":base-services")
    docsTestImplementation project(":logging")
    docsTestImplementation libs.junit5Vintage
    docsTestImplementation libs.junit

    integTestDistributionRuntimeOnly project(":distributions-full")
}

configurations.docsTestRuntimeClasspath {
    exclude group: "org.slf4j", module: "slf4j-simple"
}

asciidoctorj {
    version = '2.4.2'
    modules.pdf.version '1.5.4'
}

tasks.withType(AsciidoctorTask).configureEach { task ->
    if (task.name == "userguideSinglePagePdf") {
        task.asciidoctorj.docExtensions(
            project.getDependencies().create("org.gradle:docs-asciidoctor-extensions-base:0.12.0"),
        )
    } else {
        task.asciidoctorj.docExtensions(
            project.getDependencies().create("org.gradle:docs-asciidoctor-extensions:0.12.0"),
            project.getDependencies().create(project.files("src/main/resources"))
        )
    }
}

gradleDocumentation {
    javadocs {
        javaApi = project.uri("https://docs.oracle.com/javase/8/docs/api")
        groovyApi = project.uri("https://docs.groovy-lang.org/docs/groovy-${libs.groovyVersion}/html/gapi")
    }
}

tasks.named("stageDocs") {
    // Add samples to generated documentation
    from(samples.distribution.renderedDocumentation) {
        into("samples")
    }
}

samples {
    templates {
        javaAndroidApplication
        structuringSoftwareProjects
        springBootWebApplication {
            target = "app"
        }
        gradlePluginInJava {
            target = "greeting-plugin"
        }
        gradlePluginInJavaInBuildSrc {
            sourceDirectory = gradlePluginInJava.sourceDirectory
            target = "buildSrc"
        }
        buildSrcPluginJavaModuleTransform

        javaApplication
        javaListLibrary
        javaUtilitiesLibrary
        javaListLibraryInMyLibrary {
            sourceDirectory = javaListLibrary.sourceDirectory
            target = "my-library"
        }
        javaUtilitiesLibraryInMyLibrary {
            sourceDirectory = javaUtilitiesLibrary.sourceDirectory
            target = "my-library"
        }
        javaApplicationAsSubproject {
            sourceDirectory = javaApplication.sourceDirectory
            target = "application"
        }
        javaListLibraryAsSubproject {
            sourceDirectory = javaListLibrary.sourceDirectory
            target = "list"
        }
        javaUtilitiesLibraryAsSubproject {
            sourceDirectory = javaUtilitiesLibrary.sourceDirectory
            target = "utilities"
        }

        javaJunit5TestForApplication {
            target = "application"
        }
        javaJunit5TestForListLibrary {
            target = "list"
        }
        javaJunit5TestForUtilitiesLibrary {
            target = "utilities"
        }
        javaJunit5IntegrationTestForApplication {
            target = "application"
        }
        javaJunit5IntegrationTestForUtilitiesLibrary {
            target = "utilities"
        }

        javaModuleInfoForListLibrary {
            target = "list"
        }
        javaModuleInfoForUtilitiesLibrary {
            target = "utilities"
        }
        javaModuleInfoForApplication {
            target = "application"
        }
        javaJunit5ModuleInfoForUtilitiesLibrary {
            target = "utilities"
        }
        javaJunit5ModuleInfoForApplication {
            target = "application"
        }

        groovyListLibrary
        groovyUtilitiesLibrary
        groovyListLibraryInMyLibrary {
            sourceDirectory = groovyListLibrary.sourceDirectory
            target = "my-library"
        }
        groovyUtilitiesLibraryInMyLibrary {
            sourceDirectory = groovyUtilitiesLibrary.sourceDirectory
            target = "my-library"
        }

        projectInfoPlugin

        precompiledScriptPluginUtils {
            target = "convention-plugins"
        }
        precompiledScriptPluginUtilsInBuildSrc {
            sourceDirectory = precompiledScriptPluginUtils.sourceDirectory
            target = "buildSrc"
        }
    }

    // TODO: Do this lazily so we don't need to walk the filesystem during configuration
    // iterate through each snippets and record their names and locations
    FileFilter directoriesOnly = { it.directory }
    def topLevelDirs = file('src/snippets').listFiles(directoriesOnly)
    def snippetDirs = topLevelDirs*.listFiles(directoriesOnly).flatten().grep {
        new File(it, "kotlin").exists() || new File(it, "groovy").exists()
    }

    snippetDirs.each { File snippetDir ->
        String snippetName = snippetDir.name
        String categoryName = snippetDir.parentFile.name
        def id = org.gradle.docs.internal.StringUtils.toLowerCamelCase("snippet-" + categoryName + "-" + snippetName)
        publishedSamples.create(id) {
            description = "Snippet from $snippetDir"
            category = "Other"
            readmeFile = file("src/snippets/default-readme.adoc")
            sampleDirectory = snippetDir
            promoted = false
        }
    }

    publishedSamples {
        buildingAndroidApps {
            sampleDirectory = samplesRoot.dir("android-application")
            description = "Build a simple Android app."
            category = "Android"
            common {
                from(templates.javaAndroidApplication)
            }
        }
        buildingSpringBootWebApplications {
            sampleDirectory = samplesRoot.dir("spring-boot-web-application")
            description = "Build a simple Spring Boot application."
            category = "Spring"
            common {
                from(templates.springBootWebApplication)
            }
        }

        incubatingJvmMultiProjectWithAdditionalTestTypes {
            sampleDirectory = samplesRoot.dir("incubating/java/jvm-multi-project-with-additional-test-types")
            displayName = "Using additional test types with Test Suites (Incubating)"
            description = "Add an additional test type (e.g. integration tests) to a project using the new Test Suites API."
            category = "Java"

            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5IntegrationTestForApplication)

                from(templates.javaListLibraryAsSubproject)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5IntegrationTestForUtilitiesLibrary)

                from(templates.javaUtilitiesLibraryAsSubproject)
            }
        }
        incubatingJavaModulesMultiProjectWithIntegrationTests {
            sampleDirectory = samplesRoot.dir("incubating/java/modules-multi-project-with-integration-tests")
            displayName = "Building Java Modules with Blackbox Tests with Test Suites (Incubating)"
            description = "Build Java Modules with blackbox integration tests using the new Test Suites API."
            category = "Java Modules"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaModuleInfoForListLibrary)
                from(templates.javaModuleInfoForUtilitiesLibrary)
                from(templates.javaModuleInfoForApplication)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)

                from(templates.javaJunit5IntegrationTestForApplication)
                from(templates.javaJunit5ModuleInfoForApplication)
                from(templates.javaJunit5IntegrationTestForUtilitiesLibrary)
                from(templates.javaJunit5ModuleInfoForUtilitiesLibrary)
            }
        }
        incubatingPublishingConventionPlugins {
            sampleDirectory = samplesRoot.dir("incubating/build-organization/publishing-convention-plugins")
            displayName = "Sharing build logic in a multi-repo setup with Test Suites (Incubating)"
            description = "Organize and publish build logic for reuse in other projects using the new Test Suites API."
            category = "Java"
            common {
                from(templates.precompiledScriptPluginUtils)
            }
        }

        jvmMultiProjectWithAdditionalTestTypes {
            sampleDirectory = samplesRoot.dir("java/jvm-multi-project-with-additional-test-types")
            displayName = "Using additional test types"
            description = "Add an additional test type (e.g. integration tests) to a project."
            category = "Java"

            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5IntegrationTestForApplication)

                from(templates.javaListLibraryAsSubproject)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5IntegrationTestForUtilitiesLibrary)

                from(templates.javaUtilitiesLibraryAsSubproject)
            }
        }
        jvmMultiProjectWithToolchains {
            sampleDirectory = samplesRoot.dir("java/jvm-multi-project-with-toolchains")
            displayName = "Using toolchains"
            description = "Use toolchains to configure the JVM to use for compilation and testing."
            category = "Java"

            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5IntegrationTestForApplication)

                from(templates.javaListLibraryAsSubproject)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5IntegrationTestForUtilitiesLibrary)

                from(templates.javaUtilitiesLibraryAsSubproject)
            }
        }
        javaModulesMultiProject {
            sampleDirectory = samplesRoot.dir("java/modules-multi-project")
            displayName = "Building Java Modules"
            description = "Build Java Modules and a modular Java application."
            category = "Java Modules"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaModuleInfoForListLibrary)
                from(templates.javaModuleInfoForUtilitiesLibrary)
                from(templates.javaModuleInfoForApplication)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)
            }
        }
        javaModulesMultiProjectWithIntegrationTests {
            sampleDirectory = samplesRoot.dir("java/modules-multi-project-with-integration-tests")
            displayName = "Building Java Modules with Blackbox Tests"
            description = "Build Java Modules with blackbox integration tests."
            category = "Java Modules"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaModuleInfoForListLibrary)
                from(templates.javaModuleInfoForUtilitiesLibrary)
                from(templates.javaModuleInfoForApplication)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)

                from(templates.javaJunit5IntegrationTestForApplication)
                from(templates.javaJunit5ModuleInfoForApplication)
                from(templates.javaJunit5IntegrationTestForUtilitiesLibrary)
                from(templates.javaJunit5ModuleInfoForUtilitiesLibrary)
            }
        }
        javaModulesWithTransform {
            sampleDirectory = samplesRoot.dir("java/modules-with-transform")
            displayName = "Building Java Modules with Legacy Libraries"
            description = "Build a modular Java application that integrates legacy libraries."
            category = "Java Modules"
            common {
                from(templates.buildSrcPluginJavaModuleTransform)
            }
        }
        jvmMultiProjectWithCodeCoverageDistribution {
            sampleDirectory = samplesRoot.dir("incubating/java/jvm-multi-project-with-code-coverage-distribution")
            displayName = "Aggregating code coverage with JaCoCo from an application/distribution (Incubating)"
            description = "Report code coverage on the application/distribution of a multi-module project using link:https://www.jacoco.org/jacoco/[JaCoCo]."
            category = "Java"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5TestForUtilitiesLibrary)
            }
        }
        jvmMultiProjectWithCodeCoverageStandalone {
            sampleDirectory = samplesRoot.dir("incubating/java/jvm-multi-project-with-code-coverage-standalone")
            displayName = "Aggregating code coverage with JaCoCo using a standalone utility project (Incubating)"
            description = "Report code coverage on a multi-module project using link:https://www.jacoco.org/jacoco/[JaCoCo]."
            category = "Java"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5TestForUtilitiesLibrary)
            }
        }
        jvmMultiProjectWithTestAggregationDistribution {
            sampleDirectory = samplesRoot.dir("incubating/java/jvm-multi-project-with-test-aggregation-distribution")
            displayName = "Aggregating test results of an application/distribution (Incubating)"
            description = "Report all test results using the application/distribution of a multi-module project."
            category = "Java"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5TestForUtilitiesLibrary)
            }
        }
        jvmMultiProjectWithTestAggregationStandalone {
            sampleDirectory = samplesRoot.dir("incubating/java/jvm-multi-project-with-test-aggregation-standalone")
            displayName = "Aggregating test results using a standalone utility project (Incubating)"
            description = "Report all test results using a standalone utility project as part of a multi-module project."
            category = "Java"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaJunit5TestForApplication)
                from(templates.javaJunit5TestForListLibrary)
                from(templates.javaJunit5TestForUtilitiesLibrary)
            }
        }
        publishingJavaLibraries {
            sampleDirectory = samplesRoot.dir("java/library-publishing")
            description = "Publish a Java library to a binary repository."
            category = "Java"
            common {
                from(templates.javaListLibraryInMyLibrary)
                from(templates.javaUtilitiesLibraryInMyLibrary)
            }
        }
        publishingGroovyLibraries {
            sampleDirectory = samplesRoot.dir("groovy/library-publishing")
            description = "Publish a Groovy library to a binary repository."
            category = "Groovy"
            common {
                from(templates.groovyListLibraryInMyLibrary)
                from(templates.groovyUtilitiesLibraryInMyLibrary)
            }
        }

        gradlePlugin {
            sampleDirectory = samplesRoot.dir("build-organization/gradle-plugin")
            description = "Organize your build logic into a Gradle plugin written in Java."
            category = "Build organization"
            common {
                from(templates.gradlePluginInJava)
            }
        }

        conventionPlugins {
            sampleDirectory = samplesRoot.dir("build-organization/multi-project-with-convention-plugins")
            displayName = "Sharing build logic between subprojects"
            description = "Organize build logic into reusable pieces"
            category = "Build organization"
            common {
                from(templates.precompiledScriptPluginUtilsInBuildSrc)
            }
        }

        publishingConventionPlugins {
            sampleDirectory = samplesRoot.dir("build-organization/publishing-convention-plugins")
            displayName = "Sharing build logic in a multi-repo setup"
            description = "Organize and publish build logic for reuse in other projects"
            category = "Build organization"
            common {
                from(templates.precompiledScriptPluginUtils)
            }
        }

        sharingConventionPluginsWithBuildLogic {
            sampleDirectory = samplesRoot.dir("build-organization/sharing-convention-plugins-with-build-logic")
            displayName = "Sharing convention plugins with build logic build"
            description = "Reuse convention plugins in both main build and build logic build"
            category = "Build organization"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaListLibraryAsSubproject)
            }
        }

        taskWithArguments {
            sampleDirectory = samplesRoot.dir("writing-tasks/task-with-arguments")
            displayName = "Implementing Tasks with Command-line Arguments"
            description = "Pass arguments to a custom task."
            category = "Writing Custom Tasks"
        }

        tasksWithDependencyResolutionResultInputs {
            sampleDirectory = samplesRoot.dir("writing-tasks/tasks-with-dependency-resolution-result-inputs")
            displayName = "Implementing tasks with dependency resolution result inputs"
            description = "Consume dependency resolution result inputs in tasks."
            category = "Writing Custom Tasks"
        }

        publishingCredentials {
            sampleDirectory = samplesRoot.dir("credentials-handling/publishing-credentials")
            description = "Publish to a password protected repository"
            category = "Using Credentials"
            common {
                from(templates.javaListLibrary)
                from(templates.javaUtilitiesLibrary)
            }
        }

        credentialsForExternalToolViaStdin {
            sampleDirectory = samplesRoot.dir("credentials-handling/pass-credentials-to-external-tool-via-stdin")
            displayName = "Supply credentials to external tool"
            description = "Pass credentials to an external tool via stdin using Gradle properties."
            category = "Using Credentials"
        }

        structuringSoftwareProjects {
            sampleDirectory = samplesRoot.dir("build-organization/structuring-software-projects")
            description = "Structuring a software product project with Gradle"
            category = "Build organization"
            common {
                from(templates.structuringSoftwareProjects)
            }
        }

        compositeBuildsBasics {
            sampleDirectory = samplesRoot.dir("build-organization/composite-builds/basic")
            description = "Defining and using a composite build"
            category = "Build organization"
        }

        compositeBuildsDeclaredSubstitutions {
            sampleDirectory = samplesRoot.dir("build-organization/composite-builds/declared-substitution")
            description = "Applying and testing changes in downstream dependencies without publishing."
            category = "Build organization"
        }

        compositeBuildsHierarchicalMultirepo {
            sampleDirectory = samplesRoot.dir("build-organization/composite-builds/hierarchical-multirepo")
            description = "Defining and using a composite build to combine multiple independent builds."
            category = "Build organization"
        }

        compositeBuildsPluginDevelopment {
            sampleDirectory = samplesRoot.dir("build-organization/composite-builds/plugin-dev")
            description = "Developing a Gradle plugin in a build without publishing."
            category = "Build organization"
        }
    }
}

// Use the version of Gradle being built, not the version of Gradle used to build
tasks.named("generateWrapperForSamples") {
    gradleVersion = project.version
}

// TODO: The rich console to plain text is flaky
tasks.named("checkAsciidoctorSampleContents") {
    enabled = false
}

// exclude (unused and non-existing) wrapper of development Gradle version, as well as README, because the timestamp in the Gradle version break the cache
tasks.withType(InstallSample).configureEach {
    if (name.contains('ForTest')) {
        excludes.add("gradle/wrapper/**")
        excludes.add("README")
    }
}

// TODO add some kind of test precondition support in sample test conf
tasks.named("docsTest") { task ->
    maxParallelForks = 2
    // The org.gradle.samples plugin uses Exemplar to execute integration tests on the samples.
    // Exemplar doesn't know about that it's running in the context of the gradle/gradle build
    // so it uses the Gradle distribution from the running build. This is not correct, because
    // we want to verify that the samples work with the Gradle distribution being built.
    def installationEnvProvider = new GradleInstallationForTestEnvironmentProvider(project, task)
    installationEnvProvider.gradleHomeDir.from(configurations.integTestDistributionRuntimeClasspath)
    installationEnvProvider.samplesdir.set(project.layout.buildDirectory.dir("working/samples/testing"))
    jvmArgumentProviders.add(installationEnvProvider)

    // For unknown reason, this is set to 'sourceSet.getRuntimeClasspath()' in the 'org.gradle.samples' plugin
    testClassesDirs = sourceSets.docsTest.output.classesDirs
    // 'integTest.samplesdir' is set to an absolute path by the 'org.gradle.samples' plugin
    systemProperties.clear()

    filter {
        // workaround for https://github.com/gradle/dotcom/issues/5958
        failOnNoMatchingTests = false
        // Only execute C++ sample tests on Linux because it is the configured target
        if (!OperatingSystem.current().linux) {
            excludeTestsMatching "org.gradle.docs.samples.*.building-cpp-*.sample"
        }
        // Only execute Swift sample tests on OS X because it is the configured target
        if (!OperatingSystem.current().macOsX) {
            excludeTestsMatching "org.gradle.docs.samples.*.building-swift-*.sample"
        }
        // We don't maintain Java 7 on Windows and Mac
        if (OperatingSystem.current().windows || OperatingSystem.current().macOsX) {
            excludeTestsMatching "*java7CrossCompilation.sample"
        }
        // Only execute Groovy sample tests on Java < 9 to avoid warnings in output
        if (javaVersion.java9Compatible) {
            excludeTestsMatching "org.gradle.docs.samples.*.building-groovy-*.sample"
        }
        // Build Android only with Java 8
        if (javaVersion.java9Compatible) {
            excludeTestsMatching "org.gradle.docs.samples.*.building-android-apps_*_buildTask.sample"
            excludeTestsMatching "org.gradle.docs.samples.*.structuring-software-projects*android-app.sample"
        }
        // disable sanityCheck of 'structuring-software-projects' in any case due to deprecation warning in Android project
        excludeTestsMatching "org.gradle.docs.samples.*.structuring-software-projects*_sanityCheck.sample"

        // Do not execute Java Module tests on JVM < 9
        if (!javaVersion.java9Compatible) {
            excludeTestsMatching "org.gradle.docs.samples.*.java-modules-*.sample"
            excludeTestsMatching "org.gradle.docs.samples.*.incubating-java-modules-*.sample"
            excludeTestsMatching 'org.gradle.docs.samples.*.snippet-java-library-module*.sample'
        }
        if (javaVersion.isCompatibleWith(JavaVersion.VERSION_18)) {
            // Disable tests that use JaCoCo under JDK 18 until JaCoCo 0.8.8 is released.
            excludeTestsMatching "org.gradle.docs.samples.SamplesTest.structuring-software-projects_*_aggregate-reports.sample"
            excludeTestsMatching "org.gradle.docs.samples.SamplesTest.structuring-software-projects_*_umbrella-build.sample"
            excludeTestsMatching "org.gradle.docs.samples.SamplesTest.jvm-multi-project-with-code-coverage-*.sample"
            excludeTestsMatching "org.gradle.docs.samples.*.snippet-testing-jacoco-application*.sample"

            // Disable tests that suffer from charset issues under JDK 18 for now
            excludeTestsMatching "org.gradle.docs.samples.*.snippet-custom-model-internal-views_*_softwareModelExtend-iv.sample"
            excludeTestsMatching "org.gradle.docs.samples.*.snippet-model-rules-basic-rule-source-plugin_*_basicRuleSourcePlugin-model-task.sample"
        }
        // Android requires Java 11+
        if (!javaVersion.java11Compatible) {
            excludeTestsMatching "org.gradle.docs.samples.*.building-android-*.sample"
        }

        if (OperatingSystem.current().macOsX && System.getProperty("os.arch") == "aarch64") {
            excludeTestsMatching "org.gradle.docs.samples.*.snippet-native*.sample"
            excludeTestsMatching "org.gradle.docs.samples.*.snippet-swift*.sample"
            excludeTestsMatching "org.gradle.docs.samples.*.building-swift*.sample"
        }
    }
}

// Publications for the docs subproject:

configurations {
    gradleFullDocsElements {
        // TODO: This breaks the provider
        outgoing.artifact(project.gradleDocumentation.getDocumentationRenderedRoot().get().asFile) {
            builtBy 'docs'
        }
    }
}

tasks.named('platformTest') {
    dependsOn(tasks.named('checkSamples'))
}
tasks.named("check") {
    dependsOn(tasks.named('checkstyleApi'))
}

// TODO there is some duplication with DistributionTest.kt here - https://github.com/gradle/gradle-private/issues/3126
class GradleInstallationForTestEnvironmentProvider implements CommandLineArgumentProvider {
    private Project project
    private Test testTask

    GradleInstallationForTestEnvironmentProvider(Project project, Test testTask) {
        this.project = project
        this.testTask = testTask
    }

    @Internal
    final ConfigurableFileCollection gradleHomeDir = project.objects.fileCollection()

    @PathSensitive(PathSensitivity.RELATIVE)
    @InputDirectory
    final DirectoryProperty samplesdir = project.objects.directoryProperty()

    @Nested
    GradleDistribution gradleDistribution = new GradleDistribution(gradleHomeDir)

    @Override
    Iterable<String> asArguments() {
        def distributionName = testTask.classpath.filter { it.name.startsWith("gradle-runtime-api-info") }.singleFile.parentFile.parentFile.parentFile.name
        ["-DintegTest.gradleHomeDir=${gradleHomeDir.singleFile}",
         "-DintegTest.samplesdir=${samplesdir.get().asFile}",
         "-DintegTest.gradleUserHomeDir=${repoRoot(project).dir("intTestHomeDir/$distributionName").asFile}"]
    }
}

tasks.withType(CheckLinks).configureEach {
    enabled = !gradle.startParameter.taskNames.contains("docs:platformTest")
}

tasks.register("checkLinks") {
    dependsOn(tasks.withType(CheckLinks))
}
